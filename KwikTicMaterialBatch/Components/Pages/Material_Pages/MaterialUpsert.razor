@page "/material/create"
@page "/material/update/{id:int}"
@inject IMaterialRepository _materialRepository

<h3>CatergoryUpsert</h3>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/lib/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py2">@(Id > 0 ? "Create" : "Update") Material</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-lg btn-secondary" style="width:250px">
                        <i class="bi bi-plus-square"></i>
                        Add New Material
                    </a>
                </div>
            </div>




        </div>
    </div>
}

@code {

    private bool IsProcessing { get; set; } = true;

    [SupplyParameterFromForm]
    private Material Material { get; set; } = new Material();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // This method is called after the component has rendered to make sure that the data is loaded only once.
        if (firstRender)
        {
            await LoadMaterial();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadMaterial()
    {
        if (Id > 0)
        {
            Material = await _materialRepository.GetMaterialByIdAsync(Id);
        }
    }
}
